module cpu(
    input wire clk,
    input wire reset
);

// Control wires

    wire PC_WR;
    wire MEM_WR;
    wire IR_WR;
    wire BR_WR;
    wire A_WR;
    wire B_WR;
    wire ULA_reg_WR;
    wire srcA_selector;
    wire [1:0] srcB_selector;

    wire [2:0] ULA_ctrl;

// Data wires

    wire [31:0] Result;
    wire [31:0] ULA_reg_out;
    wire [31:0] PC_output;
    wire [31:0] MEM_to_IR;

    wire [31:26] OPCODE;
    wire [25:21] RS;
    wire [20:16] RT;
    wire [15:0] OFFSET;

    wire [31:0] BR_to_A;
    wire [31:0] BR_to_B;
    wire [31:0] A_output;
    wire [31:0] B_output;
    wire [31:0] sign_extend_1_out;
    wire [31:0] scrA_output;
    wire [31:0] srcB_output;

    wire    OF;
    wire    N;
    wire    ZR;
    wire    EQ;
    wire    GT;
    wire    LT;


    Registrador A_(
        clk,
        reset,
        A_WR,
        BR_to_A,
        A_output
    );

    Registrador B_(
        clk,
        reset,
        B_WR,
        BR_to_B,
        B_output
    );

    Registrador ULA_reg_(
        clk,
        reset,
        ULA_reg_WR,
        Result,
        ULA_reg_out
    );

    Registrador PC_(
        clk,
        reset,
        PC_WR,
        Result,
        PC_output
    );

    Memoria Memory_(
        PC_output,
        clk,
        MEM_WR,
        Result,
        MEM_to_IR
    );

    Instr_Reg IR_(
        clk,
        reset,
        IR_WR,
        MEM_to_IR,
        OPCODE,
        RS,
        RT,
        OFFSET
    );

    Banco_reg BR_(
        clk,
        reset,
        BR_WR,
        RS,
        RT,
        OFFSET[15:11],
        ULA_reg_out,
        BR_to_A,
        BR_to_B
    );

    sign_extend_1 Sign_extend_1(
        OFFSET,
        sign_extend_1_out
    );

    ulasrcA ulasrcA(
        srcA_selector,
        PC_output,
        A_output,
        scrA_output
    );

    ulasrcB ulasrcB(
        srcB_selector,
        B_output,
        sign_extend_1_out,
        srcB_output
    );

    ula32 ULA_(
        scrA_output,
        srcB_output,
        ULA_ctrl,
        Result,
        OF,
        N,
        ZR,
        EQ,
        GT,
        LT
    );

    control control(
        clk,
        reset,
        OPCODE,
        PC_WR,
        MEM_WR,
        IR_WR,
        BR_WR,
        A_WR,
        B_WR,
        ULA_reg_WR,
        ULA_ctrl,
        srcA_selector,
        srcB_selector,
        reset
    );

endmodule